mutate(fourgroups = as.numeric(FIRE)+ predtrue) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == TRUE, "fn", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == FALSE, "fp", fourgroups))
}
qsdf <- county.fips %>%
mutate(fips = ifelse(nchar(fips) == 4, paste0(0,fips), fips))
counties <- map_data('county') %>%
filter(region == state) %>%
mutate(polyname = paste0(region,",",subregion))
counties <- merge(counties, qsdf, by = "polyname", all.x = T)
counties <- merge(counties, df, by = "fips", all.x = T)
counties <- counties %>%
arrange(order)
dateweek <- counties$date_semaine[!is.na(counties$date_semaine)]
dateweek <- dateweek[1]
################################################################ Risk = pred
output$chloropleth <- renderPlot({ggplot(data = counties,
aes(x = long,
y = lat,
group = group,
fill = pred))+
geom_polygon()+
geom_path(color = 'white', size = 0.1)+
scale_fill_continuous(low = "orange",
high = "darkred",
name = 'Risk level') +
theme_map() +
coord_map('albers', lat0=30, lat1=40) +
ggtitle(paste0(State, " (week: ",  dateweek,  "): Wildfire risk level per county")) +
theme(plot.title = element_text(hjust = 0.5))
})
}
shinyApp(ui=ui, server=server)
dateweek
ui <- fluidPage(
radioButtons(inputId = "state",
label = "Choose a state:",
c("florida",
"north carolina"),
inline = T),
sliderInput(inputId = "yearz",
label = "Choose a year:",
value = 2013,
min = 2011,
max = 2015),
sliderInput(inputId = "weekk",
label = "Week",
value = 25,
min = 1,
max = 52),
plotOutput("chloropleth")
)
server <- function (input,output) {
state <- reactive(as.character(input$state))
State <- reactive({str_to_title(input$state)})
yearz <- reactive({input$yearz})
weekk <- reactive({input$weekk})
if (as.character(as.factor(state)) == "florida") {
threshold <- 0.4236217
df <- read.csv("C:/Users/Carey Suehs/Documents/GitHub/Wild_Fires/models/florida_pred.csv") %>%
select(county, date_semaine, annee, semaine, FIRE, pred) %>%
filter(annee == yearz, semaine == weekk) %>%
rename(fips = county) %>%
mutate(predtrue = ifelse(pred>as.numeric(threshold),1,0)) %>%
mutate(fourgroups = as.numeric(FIRE)+ predtrue) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == TRUE, "fn", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == FALSE, "fp", fourgroups))
}
if (as.character(as.factor(state)) == "north carolina") {
threshold <- 0.374
df <- read.csv("C:/Users/Carey Suehs/Documents/GitHub/Wild_Fires/models/nc_pred.csv") %>%
select(county, date_semaine, annee, semaine, FIRE, pred) %>%
filter(annee == yearz, semaine == weekk) %>%
rename(fips = county) %>%
mutate(predtrue = ifelse(pred>as.numeric(threshold),1,0)) %>%
mutate(fourgroups = as.numeric(FIRE)+ predtrue) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == TRUE, "fn", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == FALSE, "fp", fourgroups))
}
qsdf <- county.fips %>%
mutate(fips = ifelse(nchar(fips) == 4, paste0(0,fips), fips))
counties <- map_data('county') %>%
filter(region == state) %>%
mutate(polyname = paste0(region,",",subregion))
counties <- merge(counties, qsdf, by = "polyname", all.x = T)
counties <- merge(counties, df, by = "fips", all.x = T)
counties <- counties %>%
arrange(order)
dateweek <- counties$date_semaine[!is.na(counties$date_semaine)]
dateweek <- dateweek[1]
################################################################ Risk = pred
output$chloropleth <- renderPlot({ggplot(data = counties,
aes(x = long,
y = lat,
group = group,
fill = pred))+
geom_polygon()+
geom_path(color = 'white', size = 0.1)+
scale_fill_continuous(low = "orange",
high = "darkred",
name = 'Risk level') +
theme_map() +
coord_map('albers', lat0=30, lat1=40) +
ggtitle(paste0(State, " (week: ",  dateweek,  "): Wildfire risk level per county")) +
theme(plot.title = element_text(hjust = 0.5))
})
}
shinyApp(ui=ui, server=server)
ui <- fluidPage(
radioButtons(inputId = "state",
label = "Choose a state:",
c("florida",
"north carolina"),
inline = T),
sliderInput(inputId = "yearz",
label = "Choose a year:",
value = 2013,
min = 2011,
max = 2015),
sliderInput(inputId = "weekk",
label = "Week",
value = 25,
min = 1,
max = 52),
plotOutput("chloropleth")
)
ui <- fluidPage(
radioButtons(inputId = "state",
label = "Choose a state:",
c("florida",
"north carolina"),
inline = T),
sliderInput(inputId = "yearz",
label = "Choose a year:",
value = 2013,
min = 2011,
max = 2015),
sliderInput(inputId = "weekk",
label = "Week",
value = 25,
min = 1,
max = 52),
plotOutput("chloropleth")
)
server <- function (input,output) {
state <- reactive(as.character(input$state))
State <- reactive({str_to_title(input$state)})
yearz <- reactive({input$yearz})
weekk <- reactive({input$weekk})
if (as.character(as.factor(state)) == "florida") {
threshold <- 0.4236217
df <- read.csv("C:/Users/Carey Suehs/Documents/GitHub/Wild_Fires/models/florida_pred.csv") %>%
select(county, date_semaine, annee, semaine, FIRE, pred) %>%
filter(annee == yearz, semaine == weekk) %>%
rename(fips = county) %>%
mutate(predtrue = ifelse(pred>as.numeric(threshold),1,0)) %>%
mutate(fourgroups = as.numeric(FIRE)+ as.numeric(predtrue)) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == TRUE, "fn", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == FALSE, "fp", fourgroups))
}
if (as.character(as.factor(state)) == "north carolina") {
threshold <- 0.374
df <- read.csv("C:/Users/Carey Suehs/Documents/GitHub/Wild_Fires/models/nc_pred.csv") %>%
select(county, date_semaine, annee, semaine, FIRE, pred) %>%
filter(annee == yearz, semaine == weekk) %>%
rename(fips = county) %>%
mutate(predtrue = ifelse(pred>as.numeric(threshold),1,0)) %>%
mutate(fourgroups = as.numeric(FIRE)+ as.numeric(predtrue)) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == TRUE, "fn", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == FALSE, "fp", fourgroups))
}
qsdf <- county.fips %>%
mutate(fips = ifelse(nchar(fips) == 4, paste0(0,fips), fips))
counties <- map_data('county') %>%
filter(region == state) %>%
mutate(polyname = paste0(region,",",subregion))
counties <- merge(counties, qsdf, by = "polyname", all.x = T)
counties <- merge(counties, df, by = "fips", all.x = T)
counties <- counties %>%
arrange(order)
dateweek <- counties$date_semaine[!is.na(counties$date_semaine)]
dateweek <- dateweek[1]
################################################################ Risk = pred
output$chloropleth <- renderPlot({ggplot(data = counties,
aes(x = long,
y = lat,
group = group,
fill = pred))+
geom_polygon()+
geom_path(color = 'white', size = 0.1)+
scale_fill_continuous(low = "orange",
high = "darkred",
name = 'Risk level') +
theme_map() +
coord_map('albers', lat0=30, lat1=40) +
ggtitle(paste0(State, " (week: ",  dateweek,  "): Wildfire risk level per county")) +
theme(plot.title = element_text(hjust = 0.5))
})
}
shinyApp(ui=ui, server=server)
ui <- fluidPage(
radioButtons(inputId = "state",
label = "Choose a state:",
c("florida",
"north carolina"),
inline = T),
sliderInput(inputId = "yearz",
label = "Choose a year:",
value = 2013,
min = 2011,
max = 2015),
sliderInput(inputId = "weekk",
label = "Week",
value = 25,
min = 1,
max = 52),
plotOutput("chloropleth")
)
server <- function(input, output){}
shinyApp(ui=ui, server=server)
runApp('carey_first_chororpleth_app.R')
ui <- fluidPage(
radioButtons(inputId = "state",
label = "Choose a state:",
c("florida",
"north carolina"),
inline = T),
sliderInput(inputId = "yearz",
label = "Choose a year:",
value = 2013,
min = 2011,
max = 2015),
sliderInput(inputId = "weekk",
label = "Week",
value = 25,
min = 1,
max = 52),
plotOutput("chloropleth")
textOutput("test")
)
server <- function(input, output){
state <- reactive(as.character(input$state))
output$chloropleth <- renderPlot({hist(rnorm(1000))})
output$test <- renderText(state)
}
ui <- fluidPage(
radioButtons(inputId = "state",
label = "Choose a state:",
c("florida",
"north carolina"),
inline = T),
sliderInput(inputId = "yearz",
label = "Choose a year:",
value = 2013,
min = 2011,
max = 2015),
sliderInput(inputId = "weekk",
label = "Week",
value = 25,
min = 1,
max = 52),
plotOutput("chloropleth")
textOutput("test")
)
ui <- fluidPage(
radioButtons(inputId = "state",
label = "Choose a state:",
c("florida",
"north carolina"),
inline = T),
sliderInput(inputId = "yearz",
label = "Choose a year:",
value = 2013,
min = 2011,
max = 2015),
sliderInput(inputId = "weekk",
label = "Week",
value = 25,
min = 1,
max = 52),
plotOutput("chloropleth"),
textOutput("test")
)
server <- function(input, output){
state <- reactive(as.character(input$state))
output$chloropleth <- renderPlot({hist(rnorm(1000))})
output$test <- renderText(state)
}
shinyApp(ui=ui, server=server)
ui <- fluidPage(
radioButtons(inputId = "state",
label = "Choose a state:",
c("florida",
"north carolina"),
inline = T),
sliderInput(inputId = "yearz",
label = "Choose a year:",
value = 2013,
min = 2011,
max = 2015),
sliderInput(inputId = "weekk",
label = "Week",
value = 25,
min = 1,
max = 52),
plotOutput("chloropleth"),
textOutput("test")
)
server <- function(input, output){
state <- reactive(as.character(input$state))
output$chloropleth <- renderPlot({hist(rnorm(1000))})
output$test <- renderText({print(state)})
}
shinyApp(ui=ui, server=server)
ui <- fluidPage(
radioButtons(inputId = "state",
label = "Choose a state:",
c("florida",
"north carolina"),
inline = T),
sliderInput(inputId = "yearz",
label = "Choose a year:",
value = 2013,
min = 2011,
max = 2015),
sliderInput(inputId = "weekk",
label = "Week",
value = 25,
min = 1,
max = 52),
plotOutput("chloropleth"),
textOutput("test")
)
server <- function(input, output){
state <- reactive(as.character(input$state))
output$chloropleth <- renderPlot({hist(rnorm(1000))})
output$test <- renderText({state()})
}
shinyApp(ui=ui, server=server)
server <- function(input, output){
state <- reactive(as.character(input$state))
State <- reactive({str_to_title(input$state)})
output$chloropleth <- renderPlot({hist(rnorm(1000))})
output$test <- renderText({State()})
}
shinyApp(ui=ui, server=server)
server <- function(input, output){
state <- reactive(as.character(input$state))
State <- reactive({str_to_title(input$state)})
yearz <- reactive({input$yearz})
output$chloropleth <- renderPlot({hist(rnorm(1000))})
output$test <- renderText({Yearz()})
}
runApp('carey_first_chororpleth_app.R')
ui <- fluidPage(
radioButtons(inputId = "state",
label = "Choose a state:",
c("florida",
"north carolina"),
inline = T),
sliderInput(inputId = "yearz",
label = "Choose a year:",
value = 2013,
min = 2011,
max = 2015),
sliderInput(inputId = "weekk",
label = "Week",
value = 25,
min = 1,
max = 52),
plotOutput("chloropleth"),
textOutput("test")
)
server <- function(input, output){
state <- reactive(as.character(input$state))
State <- reactive({str_to_title(input$state)})
yearz <- reactive({input$yearz})
output$chloropleth <- renderPlot({hist(rnorm(1000))})
output$test <- renderText({yearz()})
}
shinyApp(ui=ui, server=server)
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
county <- map_data('county')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
qsdf <- county.fips %>%
mutate(fips = ifelse(nchar(fips) == 4, paste0(0,fips), fips))
qsdf
View(qsdf)
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('carey_first_chororpleth_app.R')
runApp('~/GitHub/Wild_Fires/shiny/chloropleths/app_first_chloropleths.R')
runApp('~/GitHub/Wild_Fires/shiny/chloropleths')
pacman::p_load(pROC)
df_georgia <- read.csv("C:/Users/Carey Suehs/Documents/GitHub/Wild_Fires/models/georgia_pred.csv")
df_mississippi <- read.csv("C:/Users/Carey Suehs/Documents/GitHub/Wild_Fires/models/mississippi_pred.csv")
df_florida <- read.csv("C:/Users/Carey Suehs/Documents/GitHub/Wild_Fires/models/florida_pred.csv")
df_northcarolina <- read.csv("C:/Users/Carey Suehs/Documents/GitHub/Wild_Fires/models/nc_pred.csv")
df_california <- read.csv("C:/Users/Carey Suehs/Documents/GitHub/Wild_Fires/models/XXX_pred.csv")
df_california <- read.csv("C:/Users/Carey Suehs/Documents/GitHub/Wild_Fires/models/california_pred.csv")
df_california <- read.csv("C:/Users/Carey Suehs/Documents/GitHub/Wild_Fires/models/california_pred.csv")
df_california <- read.csv("C:/Users/Carey Suehs/Documents/GitHub/Wild_Fires/models/california_pred.csv")
threshy <- data.frame(stat = as.character(),
threshi = as.numeric())
r_gg <- roc(df_georgia$FIRE, df_georgia$pred, na.rm = T)
auc(r_gg)
threshy[1,2] <- coords(r_gg, "best", best.method = "c")[1]
threshy[1,1] <- "georgia"
r_ms <- roc(df_mississippi$FIRE, df_mississippi$pred, na.rm = T)
auc(r_ms)
threshy[2,2] <- coords(r_ms, "best", best.method = "c")[1]
threshy[2,1] <- "mississippi"
r_fl <- roc(df_florida$FIRE, df_florida$pred, na.rm = T)
auc(r_fl)
threshy[3,2] <- coords(r_fl, "best", best.method = "c")[1]
threshy[3,1] <- "florida"
r_nc <- roc(df_northcarolina$FIRE, df_northcarolina$pred, na.rm = T)
auc(r_nc)
threshy[4,2] <- coords(r_nc, "best", best.method = "c")[1]
threshy[4,1] <- "northcarolina"
r_cf <- roc(df_california$FIRE, df_california$pred, na.rm = T)
auc(r_cf)
threshy[5,2] <- coords(r_cf, "best", best.method = "c")[1]
threshy[5,1] <- "california"
write.csv(threshy, "C:/Users/Carey Suehs/Documents/GitHub/Wild_Fires/shiny/wildfire_collaboration/threshy.csv")
View(threshy)
shiny::runApp('~/GitHub/Wild_Fires/shiny/wildfire_collaboration')
runApp('~/GitHub/Wild_Fires/shiny/wildfire_collaboration')
library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
library(leaflet)
library(tidyverse)
library(maps)
library(mapdata)
library(ggplot2)
library(ggthemes)
library(mapproj)
library(readxl)
source("prep_shiny_data_v3.R",encoding = "utf-8")
source("stat_desc_counties.R",encoding = "utf-8")
qsdf <- county.fips %>%
mutate(fips = ifelse(nchar(fips) == 4, paste0(0,fips), fips))
countyz <- map_data('county')
data_fl <- read.csv("florida_pred.csv")
data_nc <- read.csv("nc_pred.csv")
data_gg <- read.csv("georgia_pred.csv")
data_ms <- read.csv("mississippi_pred.csv")
data_cf <- read.csv("california_pred.csv") %>%
data_cf <- read.csv("california_pred.csv")
library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
library(leaflet)
library(tidyverse)
library(maps)
library(mapdata)
library(ggplot2)
library(ggthemes)
library(mapproj)
library(readxl)
source("prep_shiny_data_v3.R",encoding = "utf-8")
source("stat_desc_counties.R",encoding = "utf-8")
qsdf <- county.fips %>%
mutate(fips = ifelse(nchar(fips) == 4, paste0(0,fips), fips))
countyz <- map_data('county')
data_fl <- read.csv("florida_pred.csv")
data_nc <- read.csv("nc_pred.csv")
data_gg <- read.csv("georgia_pred.csv")
data_ms <- read.csv("mississippi_pred.csv")
data_cf <- read.csv("california_pred.csv")
