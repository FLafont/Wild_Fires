getwd()
states <- st_read("sf_selected_states.shp")
#
#
# states <- tigris::states() %>%
#    filter(!(NAME %in% c("Hawaii","United States Virgin Islands","Commonwealth of the Northern Mariana Islands",
#                         "Alaska","Puerto Rico","Guam","American Samoa"))) %>%
#    select(STATEFP,NAME,geometry)
#
# st_write(states,"data/sf_selected_states.shp")
library(sf)
states <- st_read("sf_selected_states.shp")
#### PREP Shiny
#library(ggmap)
library(ggplot2)
#library(tigris)
library(leaflet)
#library(maps)
library(tidyverse)
library(sf)
library(shiny)
library(maps)
library(mapdata)
library(ggthemes)
library(mapproj)
states <- st_read("sf_selected_states.shp")
don <- read_csv("table_clustering_magic_train.csv")
fires_per_year_state <- read_csv("fires_per_year_state.csv")
df <-  read_csv("df_desc.csv")
states <- st_read("sf_selected_states.shp")
pacman::p_load(ggplot2, leaflet, tidyberse, sf, shiny, maps, mapdata, ggthemes, mapproj)
pacman::p_load(ggplot2, leaflet, tidyberse, sf, shiny, maps, mapdata, ggthemes, mapproj)
pacman::p_load(ggplot2, leaflet, tidyverse, sf, shiny, maps, mapdata, ggthemes, mapproj)
#### PREP Shiny
#library(ggmap)
library(ggplot2)
#library(tigris)
library(leaflet)
#library(maps)
library(tidyverse)
library(sf)
library(shiny)
library(maps)
library(mapdata)
library(ggthemes)
library(mapproj)
states <- st_read("sf_selected_states.shp")
plot_var_state <- function(state_name,var){
variable <- ensym(var)
y_title <- case_when(
as.name(variable)=="number_of_fires"~"Nombre de feux",
as.name(variable)=="number_of_ha_burned"~"Surface brÃ»lÃ©e totale (ha)"
#as.name(variable)=="average_size"~"Surface brÃ»lÃ©e moyenne (ha)"
)
print(paste0("variable choisie: ",y_title))
print(paste0("Etat choisi: ",state_name))
fires_per_year_state %>%
filter(NAME_1 ==state_name)%>%
ggplot(aes(x = FIRE_YEAR,y=!!variable))+
geom_col(fill = "red",alpha =.4,colour="orange")+
theme_light()+
labs(title = y_title,x="",y="")+
theme(plot.title = element_text(size=12,hjust = .5))
}
don <- read_csv("table_clustering_magic_train.csv")
fires_per_year_state <- read_csv("fires_per_year_state.csv")
dff <-  read_csv("df_desc.csv")
############################################################# Prepare functions
plot_var_state <- function(state_name,var){
variable <- ensym(var)
y_title <- case_when(
as.name(variable)=="number_of_fires"~"Nombre de feux",
as.name(variable)=="number_of_ha_burned"~"Surface brÃ»lÃ©e totale (ha)"
#as.name(variable)=="average_size"~"Surface brÃ»lÃ©e moyenne (ha)"
)
print(paste0("variable choisie: ",y_title))
print(paste0("Etat choisi: ",state_name))
fires_per_year_state %>%
filter(NAME_1 ==state_name)%>%
ggplot(aes(x = FIRE_YEAR,y=!!variable))+
geom_col(fill = "red",alpha =.4,colour="orange")+
theme_light()+
labs(title = y_title,x="",y="")+
theme(plot.title = element_text(size=12,hjust = .5))
}
############################################################### PLOT DES CAUSES
dff_main_cause_cause <- dff %>%
group_by(NAME_1,STAT_CAUSE_DESCR) %>%
summarise(N = n_distinct(OBJECTID)) %>%
mutate(STAT_CAUSE_DESCR = fct_reorder(STAT_CAUSE_DESCR,desc(N)))
plot_main_cause <- function(state_name){
print(paste0("Etat choisi: ",state_name))
dff_main_cause_cause %>%
filter(NAME_1==state_name)%>%
mutate()%>%
ggplot(aes(x=reorder(STAT_CAUSE_DESCR,N),y=N)) +
geom_col(fill="lightblue",color="yellow") +
coord_flip()+
theme_light()+
labs(x="",y="",title = "Causes des feux")+
theme(plot.title = element_text(size=12,hjust = .5))
}
library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
library(leaflet)
ui <- fluidPage(theme = shinytheme("lumen"),
tabsetPanel(
tabPanel ("Etats Ã©tudiÃ©s",
h3("Wild fires in USA"),
h4("Etats les plus Ã  risque de feu"),
leafletOutput("mymap"),
p()),
tabPanel("Statistiques Descriptives",
sidebarPanel(h4 ("Informations sur les Etats"),
selectInput(inputId = "state",
label = h4("Choose a state :"),
choices = c("California","Florida", "Georgia", "Mississippi","North Carolina")),
uiOutput("state"),
hr(),
fluidRow(column(3, verbatimTextOutput("value")))),
mainPanel(
h4 ("Graphiques"),
plotOutput("histo")
)),
tabPanel("PrÃ©visions")
)
)
# Define server function
server <- function(input, output) {
stateInput <- reactive(input$state)
output$histo <- renderPlot({
state <- stateInput()
presentation_etat_feux(state_name = state)})
output$mymap <- renderLeaflet({
leaflet(states) %>%
addTiles()%>%
#addTiles("CartoDB.Positron") %>%
addPolygons(#fill = TRUE,
#fillColor = etats_selec
stroke = FALSE,
#smoothFactor = 0.2, fillOpacity = 1,
color = ~factpal(etats_selec))
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
