# st_write(states,"data/sf_selected_states.shp")
library(sf)
states <- st_read("sf_selected_states.shp")
#### PREP Shiny
#library(ggmap)
library(ggplot2)
#library(tigris)
library(leaflet)
#library(maps)
library(tidyverse)
library(sf)
library(shiny)
library(maps)
library(mapdata)
library(ggthemes)
library(mapproj)
states <- st_read("sf_selected_states.shp")
don <- read_csv("table_clustering_magic_train.csv")
fires_per_year_state <- read_csv("fires_per_year_state.csv")
df <-  read_csv("df_desc.csv")
states <- st_read("sf_selected_states.shp")
pacman::p_load(ggplot2, leaflet, tidyberse, sf, shiny, maps, mapdata, ggthemes, mapproj)
pacman::p_load(ggplot2, leaflet, tidyberse, sf, shiny, maps, mapdata, ggthemes, mapproj)
pacman::p_load(ggplot2, leaflet, tidyverse, sf, shiny, maps, mapdata, ggthemes, mapproj)
#### PREP Shiny
#library(ggmap)
library(ggplot2)
#library(tigris)
library(leaflet)
#library(maps)
library(tidyverse)
library(sf)
library(shiny)
library(maps)
library(mapdata)
library(ggthemes)
library(mapproj)
states <- st_read("sf_selected_states.shp")
plot_var_state <- function(state_name,var){
variable <- ensym(var)
y_title <- case_when(
as.name(variable)=="number_of_fires"~"Nombre de feux",
as.name(variable)=="number_of_ha_burned"~"Surface brÃ»lÃ©e totale (ha)"
#as.name(variable)=="average_size"~"Surface brÃ»lÃ©e moyenne (ha)"
)
print(paste0("variable choisie: ",y_title))
print(paste0("Etat choisi: ",state_name))
fires_per_year_state %>%
filter(NAME_1 ==state_name)%>%
ggplot(aes(x = FIRE_YEAR,y=!!variable))+
geom_col(fill = "red",alpha =.4,colour="orange")+
theme_light()+
labs(title = y_title,x="",y="")+
theme(plot.title = element_text(size=12,hjust = .5))
}
don <- read_csv("table_clustering_magic_train.csv")
fires_per_year_state <- read_csv("fires_per_year_state.csv")
dff <-  read_csv("df_desc.csv")
############################################################# Prepare functions
plot_var_state <- function(state_name,var){
variable <- ensym(var)
y_title <- case_when(
as.name(variable)=="number_of_fires"~"Nombre de feux",
as.name(variable)=="number_of_ha_burned"~"Surface brÃ»lÃ©e totale (ha)"
#as.name(variable)=="average_size"~"Surface brÃ»lÃ©e moyenne (ha)"
)
print(paste0("variable choisie: ",y_title))
print(paste0("Etat choisi: ",state_name))
fires_per_year_state %>%
filter(NAME_1 ==state_name)%>%
ggplot(aes(x = FIRE_YEAR,y=!!variable))+
geom_col(fill = "red",alpha =.4,colour="orange")+
theme_light()+
labs(title = y_title,x="",y="")+
theme(plot.title = element_text(size=12,hjust = .5))
}
############################################################### PLOT DES CAUSES
dff_main_cause_cause <- dff %>%
group_by(NAME_1,STAT_CAUSE_DESCR) %>%
summarise(N = n_distinct(OBJECTID)) %>%
mutate(STAT_CAUSE_DESCR = fct_reorder(STAT_CAUSE_DESCR,desc(N)))
plot_main_cause <- function(state_name){
print(paste0("Etat choisi: ",state_name))
dff_main_cause_cause %>%
filter(NAME_1==state_name)%>%
mutate()%>%
ggplot(aes(x=reorder(STAT_CAUSE_DESCR,N),y=N)) +
geom_col(fill="lightblue",color="yellow") +
coord_flip()+
theme_light()+
labs(x="",y="",title = "Causes des feux")+
theme(plot.title = element_text(size=12,hjust = .5))
}
library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
library(leaflet)
ui <- fluidPage(theme = shinytheme("lumen"),
tabsetPanel(
tabPanel ("Etats Ã©tudiÃ©s",
h3("Wild fires in USA"),
h4("Etats les plus Ã  risque de feu"),
leafletOutput("mymap"),
p()),
tabPanel("Statistiques Descriptives",
sidebarPanel(h4 ("Informations sur les Etats"),
selectInput(inputId = "state",
label = h4("Choose a state :"),
choices = c("California","Florida", "Georgia", "Mississippi","North Carolina")),
uiOutput("state"),
hr(),
fluidRow(column(3, verbatimTextOutput("value")))),
mainPanel(
h4 ("Graphiques"),
plotOutput("histo")
)),
tabPanel("PrÃ©visions")
)
)
# Define server function
server <- function(input, output) {
stateInput <- reactive(input$state)
output$histo <- renderPlot({
state <- stateInput()
presentation_etat_feux(state_name = state)})
output$mymap <- renderLeaflet({
leaflet(states) %>%
addTiles()%>%
#addTiles("CartoDB.Positron") %>%
addPolygons(#fill = TRUE,
#fillColor = etats_selec
stroke = FALSE,
#smoothFactor = 0.2, fillOpacity = 1,
color = ~factpal(etats_selec))
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
library(leaflet)
library(tidyverse)
library(maps)
library(mapdata)
library(ggplot2)
library(ggthemes)
library(mapproj)
library(readxl)
source("prep_shiny_data_v3.R",encoding = "utf-8")
qsdf <- county.fips %>%
mutate(fips = ifelse(nchar(fips) == 4, paste0(0,fips), fips))
countyz <- map_data('county')
data_fl <- read.csv("florida_pred.csv")
data_nc <- read.csv("nc_pred.csv")
data_gg <- read.csv("georgia_pred.csv")
data_ms <- read.csv("mississippi_pred.csv")
ui <- fluidPage(theme = shinytheme("lumen"),
tabsetPanel(
tabPanel ("Etats Ã©tudiÃ©s",
h3("Wild fires in USA"),
h4("Etats les plus Ã  risque de feu"),
leafletOutput("mymap"),
p()),
tabPanel("Statistiques Descriptives",
fluidRow(
column(width=3,
h4 ("Informations sur les Etats"),
selectInput(inputId = "state",
label = h4("Choose a state :"),
choices = c("California","Florida", "Georgia", "Mississippi","North Carolina")),
uiOutput("state"),
hr(),
fluidRow(column(3, verbatimTextOutput("value")))),
column(width=9,
h4 ("Graphiques"),
plotOutput("histo")
))),
tabPanel("PrÃ©visions",
sidebarLayout(
sidebarPanel(
radioButtons(inputId = "staate",
label = "Choose a state:",
c("California" = "california",
"Florida" =  "florida",
"Georgia"= "georgia",
"Mississippi" = "mississippi",
"North Carolina" = "north carolina"),
inline = F),
sliderInput(inputId = "yearz",
label = "Choose a year:",
value = 2013,
min = 2011,
max = 2015),
sliderInput(inputId = "weekk",
label = "Week",
value = 25,
min = 1,
max = 52)
),
mainPanel(plotOutput("chloropleth"))
))
)
)
# Define server function
server <- function(input, output) {
stateInput <- reactive(input$state)
output$histo <- renderPlot({
state <- stateInput()
presentation_etat_feux(state_name = state)})
output$mymap <- renderLeaflet({
leaflet(states) %>%
addTiles()%>%
#addTiles("CartoDB.Positron") %>%
addPolygons(#fill = TRUE,
#fillColor = etats_selec
stroke = FALSE,
#smoothFactor = 0.2, fillOpacity = 1,
color = ~factpal(etats_selec))
})
staate <- reactive(as.character(input$staate))
Staate <- reactive({str_to_title(input$staate)})
yearz <- reactive({input$yearz})
weekk <- reactive({input$weekk})
threshold <- reactive({
if(staate() == "california"){0.5}
else
if(staate() == "florida"){0.423}
else
if(staate() == "georgia"){0.5964007}
else
if(staate() == "mississippi"){0.5077671}
else
if(staate() == "north carolina"){0.374}
})
df <- reactive({
if(staate() == "florida"){
data_fl %>%
select(county, date_semaine, annee, semaine, FIRE, pred) %>%
filter(annee == yearz(), semaine == weekk()) %>%
rename(fips = county) %>%
mutate(predtrue = ifelse(pred>threshold(),1,0)) %>%
mutate(fourgroups = as.numeric(FIRE)+ predtrue) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == TRUE, "FN", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == FALSE, "FP", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 2, "TP", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 0, "TN", fourgroups))
}
else
if(staate() == "north carolina"){
data_nc %>%
select(county, date_semaine, annee, semaine, FIRE, pred) %>%
filter(annee == yearz(), semaine == weekk()) %>%
rename(fips = county) %>%
mutate(predtrue = ifelse(pred>threshold(),1,0)) %>%
mutate(fourgroups = as.numeric(FIRE)+ predtrue) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == TRUE, "FN", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == FALSE, "FP", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 2, "TP", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 0, "TN", fourgroups))
}
else
if(staate() == "georgia"){
data_gg %>%
select(county, date_semaine, annee, semaine, FIRE, pred) %>%
filter(annee == yearz(), semaine == weekk()) %>%
rename(fips = county) %>%
mutate(predtrue = ifelse(pred>threshold(),1,0)) %>%
mutate(fourgroups = as.numeric(FIRE)+ predtrue) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == TRUE, "FN", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == FALSE, "FP", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 2, "TP", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 0, "TN", fourgroups))
}
else
if(staate() == "mississippi"){
data_ms %>%
select(county, date_semaine, annee, semaine, FIRE, pred) %>%
filter(annee == yearz(), semaine == weekk()) %>%
rename(fips = county) %>%
mutate(predtrue = ifelse(pred>threshold(),1,0)) %>%
mutate(fourgroups = as.numeric(FIRE)+ predtrue) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == TRUE, "FN", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 1 & FIRE == FALSE, "FP", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 2, "TP", fourgroups)) %>%
mutate(fourgroups = ifelse(fourgroups == 0, "TN", fourgroups))
}
})
counties <- reactive({
countyz %>%
filter(region == staate()) %>%
mutate(polyname = paste0(region,",",subregion)) %>%
left_join(qsdf) %>%
mutate(fips = as.integer(fips)) %>%
left_join(df()) %>%
arrange(order)
})
dateweek <- reactive({
counties() %>%
select(date_semaine) %>%
drop_na() %>%
distinct() %>%
as.character
})
output$chloropleth <- renderPlot({ggplot(data = counties(),
aes(x = long,
y = lat,
group = group,
fill = as.character(fourgroups)))+
geom_polygon()+
geom_path(color = 'grey', size = 0.1)+
scale_fill_manual(values = c("TP" = "red",
"TN" = "#D3EAF4",
"FN" = "orange",
"FP" = "#F182A4"),
name = "Fire risk")+
theme_map() +
coord_map('albers', lat0=30, lat1=40) +
ggtitle(paste0(Staate(), " (week: ",  dateweek(),  "): Wildfire risk level / occurence per county")) +
theme(plot.title = element_text(hjust = 0.5))
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
runApp('AL-shiny-WF2_app.R')
shiny::runApp()
pacman::p_load(tidyverse, tidymodels)
library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
library(leaflet)
library(tidyverse)
library(maps)
library(mapdata)
library(ggplot2)
library(ggthemes)
library(mapproj)
library(readxl)
source("prep_shiny_data_v3.R",encoding = "utf-8")
source("stat_desc_counties.R",encoding = "utf-8")
qsdf <- county.fips %>%
mutate(fips = ifelse(nchar(fips) == 4, paste0(0,fips), fips))
countyz <- map_data('county')
data_fl <- read.csv("florida_pred.csv")
data_nc <- read.csv("nc_pred.csv")
data_gg <- read.csv("georgia_pred.csv")
data_ms <- read.csv("mississippi_pred.csv")
#data_cf <- read.csv("california_pred.csv")
threshy <- read.csv("threshy.csv")
state_names <- unique(counties_selec$NAME_1)
counties_names <- unique(counties_selec$NAME_2)
ui <- fluidPage(theme = shinytheme("lumen"),
tabsetPanel(
tabPanel ("Etats Ã©tudiÃ©s",
h3("Wild fires in USA"),
h4("Etats les plus Ã  risque de feu"),
leafletOutput("mymap"),
p()),
tabPanel("Descriptions des Ã©tats",
fluidRow(
column(width=3,
h4 ("Informations sur les Etats"),
selectInput(inputId = "state",
label = h4("Choose a state :"),
choices = c("California","Florida", "Georgia", "Mississippi","North Carolina")),
uiOutput("state"),
hr(),
fluidRow(column(3, verbatimTextOutput("value")))),
column(width=9,
h4 ("Graphiques"),
plotOutput("histo")
))),
tabPanel("Description des comtÃ©s",
fluidRow(
column(width = 3,
selectInput("State",
"Choose a State:",
choices = state_names),
uiOutput("state_name"),
selectInput(inputId="county",
label=h4("Choose a county :"),
choices=NULL),
sliderInput(inputId = "year",
label = h4("Choose a year:"),
value = 2014,
min = 2013,
max = 2015,sep="")),
column(width=9,
h4("Graphiques"),
plotOutput("meteo")
)
)),
tabPanel("PrÃ©visions",
sidebarLayout(
sidebarPanel(
radioButtons(inputId = "staate",
label = "Choose a state:",
c("California" = "california",
"Florida" =  "florida",
"Georgia"= "georgia",
"Mississippi" = "mississippi",
"North Carolina" = "north carolina"),
inline = F),
sliderInput(inputId = "yearz",
label = "Choose a year:",
value = 2013,
min = 2011,
max = 2015,sep=""),
sliderInput(inputId = "weekk",
label = "Week",
value = 25,
min = 1,
max = 52)
),
mainPanel(plotOutput("chloropleth"))
))))
runApp()
runApp()
runApp()
glmModel <-
multinom_reg(mode = "classification") %>%
set_engine("glmnet")
pacman::p_load(tidyverse, tidymodels)
raw_data <- read.csv("C:/Users/Carey Suehs/Dropbox/05-Stats/Priority 3 - Tiroirs/PROTOACCEPT1/4h-Rawdata/01-protoaccept_data_for_r/protoaccept_useful_factors.csv",
stringsAsFactors = T)
#Remove useless identifiers
raw_data$X <- NULL
#Remove variables that have no variation.
only_one <- function(x) {
length(unique(x)) == 1
}
novar <- sapply(raw_data, only_one)
table(novar)                 ##### all variables have some variation
#next <- raw_data[,!novar]
#Remove variables with >20% missing values.
missing <- function (x) {
sum(is.na(x))/length(x)*100
}
perc_na_ok <- (sapply(raw_data, missing))<20
raw_data_next <- raw_data[, perc_na_ok]
colnames(raw_data_next)
keep <- c("first_reaction",
"pub_priv",
"age",
"sex",
"n_living_home",
"university",
"employ_bit",
"investigator_diag2",
"patient_knows_diag",
"first_consult",
"participation_protocol",
"most_about_dim_1",
"most_about_dim_2",
"least_about_dim_1",
"least_about_dim_2",
"useful_for_my_health",
"will_advance_science",
"family_encourages_me_to_do_it",
"will_see_doctor_more_often",
"will_feel_better_cared_for",
"want_to_get_well",
"have_the_time",
"difficult_to_say_no_to_doctor",
"trust_my_doctor",
"useful_for_my_future_health",
"useful_for_other_patients",
"someone_close_spoke_well",
"not_useful_for_my_heath",
"dont_like_going_to_hospital",
"dont_like_going_to_doctor",
"dont_trust",
"dont_trust_pharma",
"dont_like_medical_exams",
"dont_have_time",
"live_too_far_away",
"difficult_to_come_in",
"dont_want_to_be_guineapig",
"expensive_to_come_in_often",
"time_to_give",
"number_tests_refused",
"before_ma",
"after_ma",
"payment")
df <- raw_data_next[,keep]
colnames(df)[1] <- "Y"
set.seed(456)
?initial_split
tra_dex <- initial_split(df, prop = 3/4)
df_tra <- training(tra_dex)
df_extval <- testing(tra_dex)
set.seed(678)
my_recipe <- recipe(Y~., data = df_tra) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%  #create dummies for factors
step_impute_knn(all_predictors(), -all_outcomes()) %>% #impute few missing data
step_nzv(all_predictors()) %>%                       #remove very sparse predictors
step_normalize(all_numeric_predictors())          #centre and reduce numeric predictors
baked_tra <- my_recipe %>%
prep(df_tra) %>%
bake(df_tra)
glmModel <-
multinom_reg(mode = "classification") %>%
set_engine("glmnet")
ridgeModel <-
multinom_reg(mode = "classification", mixture = 0) %>%
set_engine("glmnet")
lassoModel <-
multinom_reg(mode = "classification", mixture = 1) %>%
set_engine("glmnet")
